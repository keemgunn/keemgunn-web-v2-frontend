




.w-fit {
  width: fit-content;
}
.h-fit {
  height: fit-content;
}
.w100 {
  width: 100%;
}
.h100 {
  height: 100%;
}


.m-auto {
  margin: auto;
}


.b-pad-right {
  padding-right: var(--b-safe-margin);
}
.b-pad-right--half {
  padding-right: calc(var(--b-safe-margin)/2);
}


.sticky {
  position: sticky;
  position: -webkit-sticky;
  top: 0;
}
.relative {
  position: relative;
  top: 0;
  left: 0;
}


.over-hidden {
  overflow: hidden;
}


.top-stage-top {
  top: calc(var(--stage-top) * 1);
}
.top-stage-top--double {
  top: calc(var(--stage-top) * 2);
}




.flex {
  display: flex;
}
.f-dir-col {
  flex-direction: column;
}
.f-dir-row {
  flex-direction: row;
}
.f-al-item-start {
  align-items: flex-start;
}
.f-al-item-end {
  align-items: flex-end;
}
.f-al-item-baseline {
  align-items: baseline;
}
.f-wrap {
  flex-wrap: wrap;
}
.f-al-cont-space {
  align-content: space-between;
}
.f-js-cont-space {
  justify-content: space-between;
}
.f-js-cont-start {
  justify-content: flex-start;
}
.f-js-cont-end {
  justify-content: flex-end;
}


.al-self-str {
  align-self: stretch;
}



@mixin Gap($val) {
  .gap#{$val} {
    gap: $val + rem;
  }
  .rgap#{$val} {
    row-gap: $val + rem;
  }
  .cgap#{$val} {
    column-gap: $val + rem;
  }
} @for $i from 1 through 50 {
  @include Gap($i);
}
































